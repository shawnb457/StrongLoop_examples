{
  "name": "loopback-boot",
  "version": "1.1.1",
  "description": "Convention-based bootstrapper for LoopBack applications",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "Configuration",
    "Bootstrap"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-boot"
  },
  "main": "index.js",
  "browser": "browser.js",
  "scripts": {
    "pretest": "jshint .",
    "test": "mocha"
  },
  "license": {
    "name": "Dual MIT/StrongLoop",
    "url": "https://github.com/strongloop/loopback-boot/blob/master/LICENSE"
  },
  "dependencies": {
    "commondir": "0.0.1",
    "debug": "^0.8.1",
    "lodash.clonedeep": "^2.4.1",
    "semver": "^2.3.0",
    "underscore": "^1.6.0"
  },
  "devDependencies": {
    "loopback": "^1.5.0",
    "mocha": "^1.19.0",
    "must": "^0.11.0",
    "supertest": "^0.13.0",
    "fs-extra": "^0.9.1",
    "browserify": "^4.1.8"
  },
  "readme": "# LoopBack Boot\n\nLoopBack Boot is a convention-based bootstrapper for LoopBack applications.\n\n**For full documentation, see the official StrongLoop documentation:**\n\n * [Creating a LoopBack application](http://docs.strongloop.com/display/LB/Creating+a+LoopBack+application)\n\n## Installation\n\n    npm install loopback-boot\n\n## Usage\n\n```js\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\n\nvar app = loopback();\nboot(app, __dirname);\n\napp.use(loopback.rest());\napp.listen();\n```\n\nSee [API docs](http://apidocs.strongloop.com/loopback-boot/#api) for\ncomplete API reference.\n\n## Configurations and conventions\n\nThe bootstrapping process takes care of the following tasks:\n\n - Configuration of data-sources.\n - Definition and configuration of custom Models, attaching models to\n   data-sources.\n - Configuration of app settings like `host`, `port` or `restApiRoot`.\n - Running additional boot scripts to keep the custom setup code in multiple\n   small files as opposed to keeping everything in the main app file.\n\nBelow is the typical project layout. See the following sections for description\nof the project files.\n\n```\nproject/\n  app.js\n  app.json\n  datasources.json\n  models.json\n  models/\n  boot/\n```\n\n### App settings\n\nThe settings are loaded from the file `app.json` in the project root directory\nand can be accessed via `app.get('option-name')` from the code.\n\nAdditionally, the following files can provide values to override `app.json`:\n\n - `app.local.js` or `app.local.json`\n - `app.{env}.js` or `app.{env}.json`, where `{env}` is the value of `NODE_ENV`\n   (typically `development` or `production`)\n\n**NOTE:** The additional files can override the top-level keys with\nvalue-types (strings, numbers) only. Nested objects and arrays are\nnot supported at the moment.\n\n#### Example settings\n\n*app.json*\n\n```json\n{\n  \"host\": \"localhost\",\n  \"port\": 3000,\n  \"restApiRoot\": \"/api\"\n}\n```\n\n*app.production.js*\n\n```js\nmodule.exports = {\n  host: process.env.CUSTOM_HOST,\n  port: process.env.CUSTOM_PORT\n};\n```\n\n### Data sources\n\nThe configuration of data sources is loaded from the file `datasources.json`\nin the project root directory, the data sources can be accessed via\n`app.datasources['datasource-name']` from the code.\n\nAdditionally, the following files can provide values to override\n`datasources.json`:\n\n - `datasources.local.js` or `datasources.local.json`\n - `datasources.{env}.js` or `datasources.{env}.json`,\n    where `{env}` is the value of `NODE_ENV`\n   (typically `development` or `production`)\n\n**NOTE:** The additional files can override the top-level data-source options\nwith value-types (strings, numbers) only. Nested objects and arrays are\nnot supported at the moment.\n\n#### Example data sources\n\n*datasources.json*\n\n```js\n{\n  // the key is the datasource name\n  // the value is the config object to pass to\n  //   app.dataSource(name, config).\n  db: {\n    connector: 'memory'\n  }\n}\n```\n\n*datasources.production.json*\n\n```js\n{\n  db: {\n    connector: 'mongodb',\n    database: 'myapp',\n    user: 'myapp',\n    password: 'secret'\n  }\n}\n```\n\n### Models\n\nApp models are loaded from the file `models.json`.\n\n#### Example models\n\nThe following is example JSON for two `Model` definitions:\n`Dealership` and `Location`.\n\n```js\n{\n  // the key is the model name\n  \"Dealership\": {\n    // a reference, by name, to a dataSource definition\n    \"dataSource\": \"my-db\",\n    // the options passed to Model.extend(name, properties, options)\n    \"options\": {\n      \"relations\": {\n        \"cars\": {\n          \"type\": \"hasMany\",\n          \"model\": \"Car\",\n          \"foreignKey\": \"dealerId\"\n        }\n      }\n    },\n    // the properties passed to Model.extend(name, properties, options)\n    \"properties\": {\n      \"id\": {\"id\": true},\n      \"name\": \"String\",\n      \"zip\": \"Number\",\n      \"address\": \"String\"\n    }\n  },\n  \"Car\": {\n    \"dataSource\": \"my-db\"\n    // options can be specified at the top level too\n    \"relations\": {\n      \"dealer\": {\n        \"type\": \"belongsTo\",\n        \"model\": \"Dealership\",\n        \"foreignKey\": \"dealerId\"\n      },\n    }\n    \"properties\": {\n      \"id\": {\n        \"type\": \"String\",\n        \"required\": true,\n        \"id\": true\n      },\n      \"make\": {\n        \"type\": \"String\",\n        \"required\": true\n      },\n      \"model\": {\n        \"type\": \"String\",\n        \"required\": true\n      }\n    }\n  }\n}\n```\n\n#### Adding custom methods to models\n\nThe models created from `models.json` come with the set of built-in methods\nlike `find` and `create`. To implement your custom methods, you should\ncreate a javascript file in `models/` directory named after the model\nand define the methods there.\n\nExample:\n\n*models/car.js*\n\n```js\nmodule.exports = function(app) {\n  var Car = app.models.Car;\n\n  Car.prototype.honk = function(duration, cb) {\n    // make some noise for `duration` seconds\n    cb();\n  };\n};\n```\n\n### Boot scripts\n\nWhen the data sources and models are configured, the bootstrapper invokes\nall scripts in the `boot/` folder. The scripts are sorted lexicographically\ningoring case.\n\n#### Example boot script\n\n*boot/authentication.js*\n\n```js\nmodule.exports = function(app) {\n  app.enableAuth();\n};\n```\n\n## Running in a browser\n\nThe bootstrap process is implemented in two steps that can be called\nindependently.\n\n### Build\n\nThe first step loads all configuration files, merges values from additional\nconfig files like `app.local.js` and produces a set of instructions\nthat can be used to boot the application.\n\nThese instructions must be included in the browser bundle together\nwith all configuration scripts from `models/` and `boot/`.\n\nDon't worry, you don't have to understand these details.\nJust call `boot.compileToBrowserify`, it will take care of everything for you.\n\n*build file (Gruntfile.js, gulpfile.js)*\n\n```js\nvar browserify = require('browserify');\nvar boot = require('loopback-boot');\n\nvar b = browserify({\n  basedir: appDir,\n});\n\n// add the main application file\nb.require('./browser-app.js', { expose: 'loopback-app' });\n\n// add boot instructions\nboot.compileToBrowserify(appDir, b);\n\n// create the bundle\nvar out = fs.createWriteStream('browser-bundle.js');\nb.bundle().pipe(out);\n// handle out.on('error') and out.on('close')\n```\n\n### Run\n\nIn the browser, the main application file should call loopback-boot\nto setup the loopback application by executing the instructions\ncontained in the browser bundle:\n\n*browser-app.js*\n\n```js\nvar loopback = require('loopback');\nvar boot = require('loopback-boot');\n\nvar app = module.exports = loopback();\nboot(app);\n```\n\nThe app object created above can be accessed via `require('loopback-app')`,\nwhere `loopback-app` is the identifier used for the main app file in\nthe browserify build shown above.\n\nHere is a simple example demonstrating the concept:\n\n*index.html*\n\n```xml\n<script src=\"app.bundle.js\"></script>\n<script>\nvar app = require('loopback-app');\nvar User = app.models.User;\n\nUser.login(\n  { email: 'test@example.com', password: '12345' },\n  function(err, res) {\n    if (err) {\n      console.error('Login failed: ', err);\n    } else {\n      console.log('Logged in.');\n    }\n  }\n);\n</script>\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-boot/issues"
  },
  "homepage": "https://github.com/strongloop/loopback-boot",
  "_id": "loopback-boot@1.1.1",
  "_from": "loopback-boot@^1.0.0"
}
